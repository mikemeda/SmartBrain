{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar fs = require('fs');\n\nvar bb = require('bluebird');\n\nvar watchman = require('fb-watchman');\n\nvar path = require('path');\n\nvar uuid = require('node-uuid').v4;\n\nvar childProcess = require('child_process');\n\nvar errors = require('./errors');\n\nvar through2 = require('through2');\n\nvar subs = {\n  proj: uuid(),\n  tests: uuid(),\n  config: uuid()\n};\n\nfunction watchmanClient() {\n  var client = new watchman.Client();\n  return bb.promisifyAll(client);\n}\n\nfunction handleError(error) {\n  console.error('Error initiating watch:', error);\n  console.error(error.stack);\n  return;\n}\n\nfunction subscriptionSuccess(dir, resp) {\n  console.log(\"\\nsubscription established: \".concat(resp.subscribe, \"\\n\\t- \").concat(dir));\n}\n\nfunction shutdown(signal) {\n  return function () {\n    console.log(\"recieved: [\".concat(signal, \"]\"));\n    process.exit();\n  };\n}\n\nfunction subscribeToProcessSignals(signals, signalCb) {\n  signals = signals || ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGABRT', 'SIGTERM'];\n  signals.forEach(function (s) {\n    process.on(s, signalCb(s));\n  });\n}\n\nfunction mapTestFiles(testDir) {\n  return function (f) {\n    return path.join(testDir, f.name);\n  };\n}\n\nfunction listTestFiles(f) {\n  var exists = fs.existsSync(f);\n  return \"\\n\\t- \".concat(f, \": \").concat(exists ? 'exists' : 'missing');\n}\n\nfunction filterMissing(f) {\n  return fs.existsSync(f);\n}\n\nfunction logPrefixer(f) {\n  return through2(function (chunk, enc, next) {\n    next(); // next(null, `[${f}]: ${chunk.toString()}`);\n  });\n}\n\nfunction execute(command, f) {\n  var cp = childProcess.exec(command);\n  cp.stdout //.pipe(logPrefixer(f))\n  .pipe(process.stdout);\n  cp.stderr // .pipe(logPrefixer(f))\n  .pipe(process.stderr);\n}\n\nmodule.exports = function watch(config) {\n  var client = watchmanClient();\n  var opts = config.module;\n\n  if (!opts.query) {\n    throw new Error(errors.missingQuery);\n  }\n\n  if (!opts.command) {\n    throw new Error(errors.missingCommand);\n  }\n\n  opts.resTestDir = path.resolve(opts.testDir); // Initiate the watch\n\n  var watchProj = client.commandAsync(['watch-project', opts.projectDir]);\n  var watchTests = client.commandAsync(['watch-project', opts.resTestDir]);\n  var watchConfig = client.commandAsync(['watch-project', config.dir]);\n  var subProj = client.commandAsync(['subscribe', opts.projectDir, subs.proj, {\n    expression: opts.query,\n    fields: ['name', 'size', 'exists', 'type']\n  }]); // .then(subscriptionSuccess.bind(null, opts.projectDir));\n\n  var subTests = client.commandAsync(['subscribe', opts.resTestDir, subs.tests, {\n    expression: opts.testQuery,\n    fields: ['name', 'size', 'exists', 'type']\n  }]); // .then(subscriptionSuccess.bind(null, opts.resTestDir));\n\n  var subConfig = client.commandAsync(['subscribe', config.dir, subs.config, {\n    expression: ['name', '.tachyon.js'],\n    fields: ['name', 'size', 'exists', 'type']\n  }]); // .then(subscriptionSuccess.bind(null, opts.resTestDir));\n\n  Promise.all([watchProj, watchTests, watchConfig, subProj, subTests, subConfig]).then(function () {\n    console.log('\\nwatching for file changes\\n');\n  }).catch(handleError);\n  client.on('subscription', function (resp) {\n    // never exec on start\n    // watchman treats all files that match a query expr\n    // to be new when it first initializes a subscription\n    if (resp.is_fresh_instance) {\n      return;\n    } // reload the configuration\n\n\n    if (resp.subscription === subs.config) {\n      console.log('reloading configuration');\n      client.removeAllListeners();\n      client.end();\n      config.reload();\n      console.log(JSON.stringify(config.module));\n      watch(config);\n      return;\n    }\n\n    var numChanged = resp.files.length;\n    var list = resp.files.map(mapTestFiles(opts.testDir)); // console.log(resp);\n\n    console.log(\"\".concat(numChanged, \" file(s) changed\"));\n    console.log(\"relative test files \".concat(list.map(listTestFiles).join(''), \"\\n\"));\n    list = _.filter(list, filterMissing);\n\n    if (!list.length) {\n      console.log('no test files to execute');\n      return;\n    }\n\n    var f = list.join(' ');\n    var cmd = \"\".concat(opts.command, \" \").concat(f);\n    console.log(\"executing \".concat(cmd));\n    execute(cmd, f); // list.forEach(function(f){\n    //   let cmd = `${opts.command} ${f}`;\n    //   console.log(`executing ${cmd}`);\n    //   execute(cmd, f);\n    // });\n  });\n};\n\nsubscribeToProcessSignals(null, shutdown);","map":null,"metadata":{},"sourceType":"script"}